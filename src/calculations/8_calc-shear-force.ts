/* eslint-disable @typescript-eslint/no-unused-vars */
import { roundNumber } from './util';

const TEXT_UNEXECUTED = '–¢—Ä–µ–±–æ–≤–∞–Ω–∏–µ –Ω–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è.';

const ERROR_QMAX_MORE_THAN_Q =
  '( Qmax > Q ) –ü—Ä–æ—á–Ω–æ—Å—Ç—å –ø–æ –ø–æ–ª–æ—Å–µ –º–µ–∂–¥—É –Ω–∞–∫–ª–æ–Ω–Ω—ã–º–∏ —Ç—Ä–µ—â–∏–Ω–∞–º–∏ –Ω–µ –æ–±–µ—Å–ø–µ—á–µ–Ω–∞.';
const ERROR_QMAX_MORE_THAN_QULT =
  '( Qmax > Qult ) –ü—Ä–æ—á–Ω–æ—Å—Ç—å –Ω–∞–∫–ª–æ–Ω–Ω–æ–≥–æ —Å–µ—á–µ–Ω–∏—è –Ω–∞ –¥–µ–π—Å—Ç–≤–∏–µ –ø–æ–ø–µ—Ä–µ—á–Ω–æ–π —Å–∏–ª—ã –Ω–µ –æ–±–µ—Å–ø–µ—á–µ–Ω–∞.';
const ERROR_M_MORE_THAN_MULT =
  '( M > Mult ) –ü—Ä–æ—á–Ω–æ—Å—Ç—å –Ω–∞–∫–ª–æ–Ω–Ω–æ–≥–æ —Å–µ—á–µ–Ω–∏—è –Ω–∞ –¥–µ–π—Å—Ç–≤–∏–µ –º–æ–º–µ–Ω—Ç–∞ –Ω–µ –æ–±–µ—Å–ø–µ—á–µ–Ω–∞.';
const ERROR_A_PLUS_A_C_MORE_THAN_H =
  '–í—ã—Å–æ—Ç–∞ —Å–µ—á–µ–Ω–∏—è (h) –¥–æ–ª–∂–Ω–∞ –ø—Ä–µ–≤—ã—à–∞—Ç—å —Å—É–º–º—É –∑–∞—â–∏—Ç–Ω–æ–≥–æ —Å–ª–æ—è –±–µ—Ç–æ–Ω–∞ —Ä–∞—Å—Ç—è–Ω—É—Ç–æ–π –∏ —Å–∂–∞—Ç–æ–π –∑–æ–Ω—ã (a + a`).';

export interface CalculateShearForceParams {
  M: number;
  Qmax: number;
  N: number;
  q: number;

  h: number;
  b: number;
  a: number;
  a_c: number;

  As: number;
  As_c: number;
  Asw: number;
  sw: number;

  gamma: number;

  Rb: number;
  Rbt: number;
  Eb: number;

  Rs: number;
  Es: number;
  Rsw: number;
}

export interface CalculateShearForceResult {
  Q?: number;
  Qmax?: number;
  Qult?: number;
  M?: number;
  Mult?: number;
  error?: string;
}

export default function CalculateShearForce({
  M,
  Qmax,
  N,
  q,

  h,
  b,
  a,
  a_c,

  As,
  As_c,
  Asw,
  sw,

  gamma,

  Rb: Rb_raw,
  Rbt: Rbt_raw,
  Eb,

  Rs,
  Es,
  Rsw
}: CalculateShearForceParams): CalculateShearForceResult {
  const Rb = Rb_raw * gamma;
  const Rbt = Rbt_raw * gamma;

  /** –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞ ùúôùëõ */
  const alpha = Es / (Eb * 1000);
  const Ab = b * h - As - As_c;
  const sigma_cp = Math.abs(N) / (Ab + alpha * (As + As_c));

  const cpde = Ab + alpha * (As + As_c);

  const a_a_c = a + a_c;
  if (a_a_c >= h) {
    return {
      error: `${ERROR_A_PLUS_A_C_MORE_THAN_H} ${TEXT_UNEXECUTED}`
    };
  }

  //–ü–æ—Å–∫–æ–ª—å–∫—É ùëÅ = ‚àí3.00 ¬∑ 103 –∫–≥ < 0 —ç–ª–µ–º–µ–Ω—Ç –æ–±–∂–∞—Ç
  //–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∑–Ω–∞–∫ —É N
  let fi_n = 1;
  if (N < 0) {
    fi_n = 1 + sigma_cp / Rb;
  } else if (N > 0) {
    fi_n = 1 - sigma_cp / Rbt;
  }

  //—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
  const fi_b1 = 0.3;
  const fi_b2 = 1.5;
  const fi_sw = 0.75;

  //—Ä–∞–±–æ—á–∞—è –≤—ã—Å–æ—Ç–∞ —Å–µ—á–µ–Ω–∏—è
  const h0 = h - a;

  //–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—á–Ω–æ—Å—Ç–∏ –ø–æ –ø–æ–ª–æ—Å–µ –º–µ–∂–¥—É –Ω–∞–∫–ª–æ–Ω–Ω—ã–º–∏ —Ç—Ä–µ—â–∏–Ω–∞–º–∏.
  const Q = fi_n * fi_b1 * Rb * b * h0;

  if (Q < Qmax) {
    return {
      error: `${ERROR_QMAX_MORE_THAN_Q} ${TEXT_UNEXECUTED}`
    };
  }

  const sw_Q = (Rbt * b * Math.pow(h0, 2)) / Qmax;
  const qsw = (Rsw * Asw) / sw;
  const qsw_0_25 = 0.25 * Rbt * b;

  //–∑–Ω–∞—á–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ [h0; 3*h0]
  const c_end = 3 * h0;
  let c_start = h0;
  //–¥–ª—è Qb
  let x = h0;

  let Qb = (fi_n * fi_b2 * Rbt * b * Math.pow(h0, 2)) / h0;
  let Qb_2_5 = 2.5 * Rbt * b * h0;
  let Qb_0_5 = 0.5 * Rbt * b * h0;
  let Qsw = fi_sw * qsw * h0;
  let Qult = Qb + Qsw + q * h0;

  //–ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –º–∏–Ω–∏–º–∞–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π Qult –∏ C
  let Qult_min = Qult;
  let c_min = h0;
  //–∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞
  const n = (c_end - h0) / 8;

  //–∞–ª–≥–æ—Ä–∏—Ç–º –¥–ª—è –ø–æ–∏—Å–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π Qult –∏ C
  for (let i = 0; i <= 8; i++) {
    Qb = (fi_n * fi_b2 * Rbt * b * Math.pow(h0, 2)) / c_start;

    Qsw = fi_sw * qsw * x;

    Qult = Qb + Qsw + q * c_start;

    x = x + n;
    c_start = c_start + n;

    if (c_start >= 2 * h0) {
      x = 2 * h0;
    }

    if (Qult_min > Qult) {
      Qult_min = Qult;
      c_min = c_start - n;
    }
  }

  //—Ä–∞—Å—á–µ—Ç —Å —É—á–µ—Ç–æ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
  Qb = (fi_n * fi_b2 * Rbt * b * Math.pow(h0, 2)) / c_min;

  const c0 = c_min;
  if (c_min >= 2 * h0) {
    c_min = 2 * h0;
  }
  Qsw = fi_sw * qsw * c_min;
  Qult = Qb + Qsw + q * c0;

  //–ø—Ä–æ–≤–µ—Ä–∫–∞ Qb
  if (Qb >= Qb_2_5) {
    Qb = Qb_2_5;
  }
  if (Qb <= Qb_0_5) {
    Qb = Qb_0_5;
  }

  //–ü—Ä–æ—á–Ω–æ—Å—Ç—å –Ω–∞–∫–ª–æ–Ω–Ω–æ–≥–æ —Å–µ—á–µ–Ω–∏—è –Ω–∞ –¥–µ–π—Å—Ç–≤–∏–µ –ø–æ–ø–µ—Ä–µ—á–Ω–æ–π —Å–∏–ª—ã.
  if (Qult < Qmax) {
    return {
      error: `${ERROR_QMAX_MORE_THAN_QULT} ${TEXT_UNEXECUTED}`
    };
  }

  //–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—á–Ω–æ—Å—Ç–∏ –Ω–∞–∫–ª–æ–Ω–Ω–æ–≥–æ —Å–µ—á–µ–Ω–∏—è –Ω–∞ –¥–µ–π—Å—Ç–≤–∏–µ –º–æ–º–µ–Ω—Ç–∞ –ø—Ä–∏ ùê∂ = h0.
  //–ö–æ–¥–∞ Mult –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ

  //–Ω–µ —Å–æ–≤—Å–µ–º –ø–æ–Ω–∏–º–∞—é –¥–ª—è —á–µ–≥–æ –æ–Ω–∏ —ç—Ç–æ –ø—Ä–æ–≤–µ—Ä—è—é—Ç
  let C = h0;
  if (C >= 2 * h0) {
    C = 2 * h0;
  }

  const zs = 0.9 * C;
  const Ns = Rs * As;
  const Ms = Ns * zs;
  const qsw_end = (Rsw * Asw) / sw;
  const Qsw_end = qsw_end * C;
  const Msw = 0.5 * Qsw_end * C;
  const Mult = Ms + Msw;

  //–ü—Ä–æ—á–Ω–æ—Å—Ç—å –Ω–∞–∫–ª–æ–Ω–Ω–æ–≥–æ —Å–µ—á–µ–Ω–∏—è –Ω–∞ –¥–µ–π—Å—Ç–≤–∏–µ –º–æ–º–µ–Ω—Ç–∞
  if (Mult < M) {
    return {
      error: `${ERROR_M_MORE_THAN_MULT} ${TEXT_UNEXECUTED}`
    };
  }

  return {
    Q: roundNumber(Q),
    Qmax: roundNumber(Qmax),
    Qult: roundNumber(Qult),
    M: roundNumber(M),
    Mult: roundNumber(Mult),
    error: ''
  };
}
